// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MvcTaskManger.Identity;

namespace MvcTaskManger.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MvcTaskManger.Identity.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("MvcTaskManger.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<int>("CountryID");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("Gender");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<bool>("ReceiveNewsLetters");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("CountryID");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("MvcTaskManger.Models.ClientLocation", b =>
                {
                    b.Property<int>("ClientLocationID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClientLocationName");

                    b.HasKey("ClientLocationID");

                    b.ToTable("ClientLocations");

                    b.HasData(
                        new { ClientLocationID = 1, ClientLocationName = "New York" },
                        new { ClientLocationID = 2, ClientLocationName = "Chicago" },
                        new { ClientLocationID = 3, ClientLocationName = "Las Vegas" },
                        new { ClientLocationID = 4, ClientLocationName = "Seattle" },
                        new { ClientLocationID = 5, ClientLocationName = "San Francisco" },
                        new { ClientLocationID = 6, ClientLocationName = "Charleston" },
                        new { ClientLocationID = 7, ClientLocationName = "Washington" }
                    );
                });

            modelBuilder.Entity("MvcTaskManger.Models.Country", b =>
                {
                    b.Property<int>("CountryID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryName");

                    b.HasKey("CountryID");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("MvcTaskManger.Models.Project", b =>
                {
                    b.Property<int>("ProjectID");

                    b.Property<bool>("Active");

                    b.Property<int>("ClientLocationID");

                    b.Property<DateTime>("DateOfStart");

                    b.Property<string>("ProjectName");

                    b.Property<string>("Status");

                    b.Property<int?>("TeamSize");

                    b.HasKey("ProjectID");

                    b.HasIndex("ClientLocationID");

                    b.ToTable("Projects");

                    b.HasData(
                        new { ProjectID = 1, Active = true, ClientLocationID = 1, DateOfStart = new DateTime(2020, 4, 24, 0, 0, 0, 0, DateTimeKind.Unspecified), ProjectName = "E-Commerce Platform", Status = "In Force", TeamSize = 15 },
                        new { ProjectID = 2, Active = true, ClientLocationID = 2, DateOfStart = new DateTime(2019, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified), ProjectName = "Social Media Platform", Status = "Support", TeamSize = 12 },
                        new { ProjectID = 3, Active = false, ClientLocationID = 3, DateOfStart = new DateTime(2020, 10, 9, 0, 0, 0, 0, DateTimeKind.Unspecified), ProjectName = "Job App", Status = "Support", TeamSize = 9 },
                        new { ProjectID = 4, Active = true, ClientLocationID = 4, DateOfStart = new DateTime(2021, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified), ProjectName = "Healthcare App", Status = "In Force", TeamSize = 10 },
                        new { ProjectID = 5, Active = false, ClientLocationID = 5, DateOfStart = new DateTime(2020, 4, 24, 0, 0, 0, 0, DateTimeKind.Unspecified), ProjectName = "Gaming App", Status = "In Force", TeamSize = 16 }
                    );
                });

            modelBuilder.Entity("MvcTaskManger.Models.Skill", b =>
                {
                    b.Property<int>("SkillID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ExpertiseLevel");

                    b.Property<string>("Id");

                    b.Property<string>("SkillName");

                    b.HasKey("SkillID");

                    b.HasIndex("Id");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("MvcTaskManger.Models.Task", b =>
                {
                    b.Property<int>("TaskID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssignedTo");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("CurrentStatus");

                    b.Property<int>("CurrentTaskStatusID");

                    b.Property<string>("Description");

                    b.Property<DateTime>("LastUpdatedOn");

                    b.Property<int>("ProjectID");

                    b.Property<int>("TaskPriorityID");

                    b.Property<string>("TaskTitle");

                    b.HasKey("TaskID");

                    b.HasIndex("AssignedTo");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ProjectID");

                    b.HasIndex("TaskPriorityID");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("MvcTaskManger.Models.TaskPriority", b =>
                {
                    b.Property<int>("TaskPriorityID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TaskPriorityName");

                    b.HasKey("TaskPriorityID");

                    b.ToTable("TaskPriorities");
                });

            modelBuilder.Entity("MvcTaskManger.Models.TaskStatus", b =>
                {
                    b.Property<int>("TaskStatusID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TaskStatusName");

                    b.HasKey("TaskStatusID");

                    b.ToTable("TaskStatuses");

                    b.HasData(
                        new { TaskStatusID = 1, TaskStatusName = "Holding" },
                        new { TaskStatusID = 2, TaskStatusName = "Prioritized" },
                        new { TaskStatusID = 3, TaskStatusName = "Started" },
                        new { TaskStatusID = 4, TaskStatusName = "Finished" },
                        new { TaskStatusID = 5, TaskStatusName = "Reverted" }
                    );
                });

            modelBuilder.Entity("MvcTaskManger.Models.TaskStatusDetail", b =>
                {
                    b.Property<int>("TaskStatusDetailID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<DateTime>("StatusUpdationDateTime");

                    b.Property<int>("TaskID");

                    b.Property<int>("TaskStatusID");

                    b.Property<string>("UserID");

                    b.HasKey("TaskStatusDetailID");

                    b.HasIndex("TaskID");

                    b.HasIndex("TaskStatusID");

                    b.HasIndex("UserID");

                    b.ToTable("TaskStatusDetails");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("MvcTaskManger.Identity.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MvcTaskManger.Identity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MvcTaskManger.Identity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("MvcTaskManger.Identity.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MvcTaskManger.Identity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MvcTaskManger.Identity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MvcTaskManger.Identity.ApplicationUser", b =>
                {
                    b.HasOne("MvcTaskManger.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MvcTaskManger.Models.Project", b =>
                {
                    b.HasOne("MvcTaskManger.Models.ClientLocation", "ClientLocation")
                        .WithMany()
                        .HasForeignKey("ClientLocationID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MvcTaskManger.Models.Skill", b =>
                {
                    b.HasOne("MvcTaskManger.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("Id");
                });

            modelBuilder.Entity("MvcTaskManger.Models.Task", b =>
                {
                    b.HasOne("MvcTaskManger.Identity.ApplicationUser", "AssignedToUser")
                        .WithMany()
                        .HasForeignKey("AssignedTo");

                    b.HasOne("MvcTaskManger.Identity.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("MvcTaskManger.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MvcTaskManger.Models.TaskPriority", "TaskPriority")
                        .WithMany()
                        .HasForeignKey("TaskPriorityID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MvcTaskManger.Models.TaskStatusDetail", b =>
                {
                    b.HasOne("MvcTaskManger.Models.Task")
                        .WithMany("TaskStatusDetails")
                        .HasForeignKey("TaskID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MvcTaskManger.Models.TaskStatus", "TaskStatus")
                        .WithMany()
                        .HasForeignKey("TaskStatusID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MvcTaskManger.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });
#pragma warning restore 612, 618
        }
    }
}
